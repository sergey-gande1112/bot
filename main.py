import logging
from telegram import Update, ChatPermissions, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters
import json
import os
import random
from datetime import datetime, timedelta

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è httpx
logging.getLogger("httpx").setLevel(logging.WARNING)

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = 5815876536

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7263696629:AAHsATED3c82dmKMpHLGxNztCcOPZKl0tQI"

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
DATA_FILE = 'user_data.json'

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
def load_user_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
def save_user_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = load_user_data()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
def create_confirmation_keyboard(action: str, user_id: int) -> InlineKeyboardMarkup:
    keyboard = [
        [
            InlineKeyboardButton("–î–∞", callback_data=f"{action}_confirm_{user_id}"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data=f"{action}_cancel_{user_id}")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —Å–æ —Å—Å—ã–ª–∫–æ–π
def create_link_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [
            InlineKeyboardButton("‚Ü©Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç", url="https://t.me/SkyRuShop_Bot")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)
    username = update.effective_user.username if update.effective_user.username else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    if user_id not in user_data:
        user_data[user_id] = {
            'username': username,
            'level': 1,
            'points': 0,
            'last_farm_time': (datetime.now() - timedelta(hours=3)).isoformat(),  # –ü–æ–∑–≤–æ–ª—è–µ–º —Å—Ä–∞–∑—É —Ñ–∞—Ä–º–∏—Ç—å
            'last_game_time': (datetime.now() - timedelta(hours=4)).isoformat()   # –ü–æ–∑–≤–æ–ª—è–µ–º —Å—Ä–∞–∑—É –∏–≥—Ä–∞—Ç—å
        }
        save_user_data(user_data)

    commands = (
        "*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!* üéâ\n\n"
        "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
        "üü¢ /start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º\n"
        "üåæ /farm - –ü–æ–ª—É—á–∏—Ç—å —Å–∫–∞–∏\n"
        "üìä /stats - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
        "‚öîÔ∏è /buff - –ü—Ä–æ–∫–∞—á–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å\n"
        "‚ÑπÔ∏è /info - –£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Ä–æ–≤–Ω–µ–π\n"
        "üé≤ /rul - –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ –∏ –ø–æ–ª—É—á–∏ —Å–∫–∞–∏\n"
        "üèÜ /top - –¢–æ–ø 5 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∫–∞–µ–≤\n"
    )

    await update.message.reply_text(commands, parse_mode=ParseMode.MARKDOWN, reply_markup=create_link_keyboard())

# –§—É–Ω–∫—Ü–∏—è —Ñ–∞—Ä–º–∞ –æ—á–∫–æ–≤
async def farm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)

    if user_id not in user_data:
        await update.message.reply_text('–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.')
        return

    user = user_data[user_id]
    now = datetime.now()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–∞—Ä–º–∞
    last_farm_time = datetime.fromisoformat(user['last_farm_time'])
    wait_time = last_farm_time + timedelta(hours=3) - now
    if wait_time > timedelta(0):
        hours, remainder = divmod(wait_time.total_seconds(), 3600)
        minutes, seconds = divmod(remainder, 60)
        await update.message.reply_text(
            f'‚è≥ –í—ã –º–æ–∂–µ—Ç–µ —Ñ–∞—Ä–º–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ 3 —á–∞—Å–∞. –û—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å: {int(hours)}—á {int(minutes)}–º {int(seconds)}—Å.'
        )
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–∞–µ–≤
    points = user['level']
    user['points'] += points
    user['last_farm_time'] = now.isoformat()
    save_user_data(user_data)
    await update.message.reply_text(f'üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {points} —Å–∫–∞–µ–≤! –£ –≤–∞—Å —Å–µ–π—á–∞—Å {user["points"]} —Å–∫–∞–µ–≤.')

# –ö–æ–º–∞–Ω–¥–∞ /stats
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)

    if user_id not in user_data:
        await update.message.reply_text('–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.')
        return

    user = user_data[user_id]
    stats_message = (
        f"üë§ *–õ–æ–≥–∏–Ω:* {user['username']}\n"
        f"‚òÅÔ∏è *–í—Å–µ–≥–æ —Å–∫–∞–µ–≤:* {user['points']}\n"
        f"üìÉ *–í–∞—à —É—Ä–æ–≤–µ–Ω—å:* {user['level']}"
    )
    await update.message.reply_text(stats_message, parse_mode=ParseMode.MARKDOWN)

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–∫–∞—á–∫–∏ —É—Ä–æ–≤–Ω—è
async def buff(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)

    if user_id not in user_data:
        await update.message.reply_text('–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.')
        return

    user = user_data[user_id]
    next_level_cost = user['level'] * 10

    if user['points'] < next_level_cost:
        await update.message.reply_text(f'‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∫–∞–µ–≤ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è. –ù—É–∂–Ω–æ {next_level_cost} —Å–∫–∞–µ–≤.')
        return

    # –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
    user['points'] -= next_level_cost
    user['level'] += 1
    save_user_data(user_data)

    await update.message.reply_text(f'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–≤—ã—Å–∏–ª–∏ —É—Ä–æ–≤–µ–Ω—å –¥–æ {user["level"]}. –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {user["points"]} —Å–∫–∞–µ–≤.')

# –ö–æ–º–∞–Ω–¥–∞ /info
async def info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    level_costs = {level: level * 10 for level in range(2, 11)}
    info_message = "*–¶–µ–Ω—ã –∑–∞ —É—Ä–æ–≤–Ω–∏:*\n"
    for level, cost in level_costs.items():
        info_message += f"–£—Ä–æ–≤–µ–Ω—å {level}: {cost} —Å–∫–∞–µ–≤\n"
    await update.message.reply_text(info_message, parse_mode=ParseMode.MARKDOWN)

# –ö–æ–º–∞–Ω–¥–∞ /top
async def top(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∫–∞–µ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è
    sorted_users = sorted(user_data.items(), key=lambda x: x[1]['points'], reverse=True)[:5]

    top_message = "<b>–¢–æ–ø 5 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∫–∞–µ–≤:</b>\n"
    for rank, (user_id, user_info) in enumerate(sorted_users, start=1):
        top_message += f"{rank}. @{user_info['username']} - {user_info['points']} —Å–∫–∞–µ–≤\n"

    if not sorted_users:
        top_message = "‚õî –¢–æ–ø 5 –∏–≥—Ä–æ–∫–æ–≤ –ø—É—Å—Ç."

    await update.message.reply_text(top_message, parse_mode=ParseMode.HTML)


# –ö–æ–º–∞–Ω–¥–∞ /ban
async def ban(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not update.message.reply_to_message:
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å.")
        return

    user_to_ban = update.message.reply_to_message.from_user.id
    keyboard = create_confirmation_keyboard('ban', user_to_ban)

    await update.message.reply_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_to_ban}?",
        reply_markup=keyboard
    )

# –ö–æ–º–∞–Ω–¥–∞ /unban
async def unban(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not update.message.reply_to_message:
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–±–∞–Ω–∏—Ç—å.")
        return

    user_to_unban = update.message.reply_to_message.from_user.id
    keyboard = create_confirmation_keyboard('unban', user_to_unban)

    await update.message.reply_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_to_unban}?",
        reply_markup=keyboard
    )

# –ö–æ–º–∞–Ω–¥–∞ /mute
async def mute(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not update.message.reply_to_message:
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–º—É—Ç–∏—Ç—å.")
        return

    user_to_mute = update.message.reply_to_message.from_user.id
    keyboard = create_confirmation_keyboard('mute', user_to_mute)

    await update.message.reply_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_to_mute}?",
        reply_markup=keyboard
    )

# –ö–æ–º–∞–Ω–¥–∞ /unmute
async def unmute(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not update.message.reply_to_message:
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–º—É—Ç–∏—Ç—å.")
        return

    user_to_unmute = update.message.reply_to_message.from_user.id
    keyboard = create_confirmation_keyboard('unmute', user_to_unmute)

    await update.message.reply_to_message(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_to_unmute}?",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∞
async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    action, decision, user_id = query.data.split('_')

    if decision == 'confirm':
        if action == 'ban':
            await context.bot.ban_chat_member(update.effective_chat.id, int(user_id))
            await query.edit_message_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω.")
        elif action == 'unban':
            await context.bot.unban_chat_member(update.effective_chat.id, int(user_id))
            await query.edit_message_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω.")
        elif action == 'mute':
            until_date = datetime.now() + timedelta(days=1)
            permissions = ChatPermissions(can_send_messages=False)
            await context.bot.restrict_chat_member(update.effective_chat.id, int(user_id), permissions, until_date=until_date)
            await query.edit_message_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±—ã–ª –∑–∞–º—É—á–µ–Ω –Ω–∞ 1 –¥–µ–Ω—å.")
        elif action == 'unmute':
            permissions = ChatPermissions(can_send_messages=True)
            await context.bot.restrict_chat_member(update.effective_chat.id, int(user_id), permissions)
            await query.edit_message_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±—ã–ª —Ä–∞–∑–º—É—á–µ–Ω.")
    else:
        await query.edit_message_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

# –ö–æ–º–∞–Ω–¥–∞ /rul
async def rul(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)

    if user_id not in user_data:
        await update.message.reply_text('–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.')
        return

    user = user_data[user_id]
    now = datetime.now()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã
    last_game_time = datetime.fromisoformat(user['last_game_time'])
    wait_time = last_game_time + timedelta(hours=4) - now
    if wait_time > timedelta(0):
        hours, remainder = divmod(wait_time.total_seconds(), 3600)
        minutes, seconds = divmod(remainder, 60)
        await update.message.reply_text(
            f'‚è≥ –í—ã –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å –≤ —ç—Ç—É –∏–≥—Ä—É —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ 4 —á–∞—Å–∞. –û—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å: {int(hours)}—á {int(minutes)}–º {int(seconds)}—Å.'
        )
        return

    user['last_game_time'] = now.isoformat()
    save_user_data(user_data)

    await update.message.reply_text('–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≥–∞–¥–∞—Ç—å!')

    number_to_guess = random.randint(1, 10)
    context.user_data['number_to_guess'] = number_to_guess

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–≥–∞–¥—ã–≤–∞–Ω–∏—è —á–∏—Å–ª–∞
async def guess_number(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)

    if 'number_to_guess' not in context.user_data:
        return  # –ï—Å–ª–∏ —á–∏—Å–ª–æ –Ω–µ –∑–∞–≥–∞–¥–∞–Ω–æ, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

    try:
        guess = int(update.message.text)
    except ValueError:
        return  # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

    number_to_guess = context.user_data['number_to_guess']

    if guess == number_to_guess:
        user_data[user_id]['points'] += 10
        save_user_data(user_data)
        await update.message.reply_text('üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ –∏ –ø–æ–ª—É—á–∏–ª–∏ 10 —Å–∫–∞–µ–≤.')
    else:
        await update.message.reply_text(f'‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ {number_to_guess}.')

    del context.user_data['number_to_guess']  # –£–¥–∞–ª—è–µ–º –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("farm", farm))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("buff", buff))
    app.add_handler(CommandHandler("info", info))
    app.add_handler(CommandHandler("top", top))
    app.add_handler(CommandHandler("ban", ban))
    app.add_handler(CommandHandler("unban", unban))
    app.add_handler(CommandHandler("mute", mute))
    app.add_handler(CommandHandler("unmute", unmute))
    app.add_handler(CommandHandler("rul", rul))
    app.add_handler(CallbackQueryHandler(handle_callback_query))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), guess_number))

    app.run_polling()

if __name__ == "__main__":
    main()
